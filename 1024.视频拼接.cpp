/*
 * @lc app=leetcode.cn id=1024 lang=cpp
 *
 * [1024] 视频拼接
 *
 * https://leetcode-cn.com/problems/video-stitching/description/
 *
 * algorithms
 * Medium (48.03%)
 * Likes:    191
 * Dislikes: 0
 * Total Accepted:    23.8K
 * Total Submissions: 41.9K
 * Testcase Example:  '[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]]\n10'
 *
 * 你将会获得一系列视频片段，这些片段来自于一项持续时长为 T 秒的体育赛事。这些片段可能有所重叠，也可能长度不一。
 * 
 * 视频片段 clips[i] 都用区间进行表示：开始于 clips[i][0] 并于 clips[i][1]
 * 结束。我们甚至可以对这些片段自由地再剪辑，例如片段 [0, 7] 可以剪切成 [0, 1] + [1, 3] + [3, 7] 三部分。
 * 
 * 我们需要将这些片段进行再剪辑，并将剪辑后的内容拼接成覆盖整个运动过程的片段（[0, T]）。返回所需片段的最小数目，如果无法完成该任务，则返回 -1
 * 。
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
 * 输出：3
 * 解释：
 * 我们选中 [0,2], [8,10], [1,9] 这三个片段。
 * 然后，按下面的方案重制比赛片段：
 * 将 [1,9] 再剪辑为 [1,2] + [2,8] + [8,9] 。
 * 现在我们手上有 [0,2] + [2,8] + [8,10]，而这些涵盖了整场比赛 [0, 10]。
 * 
 * 
 * 示例 2：
 * 
 * 
 * 输入：clips = [[0,1],[1,2]], T = 5
 * 输出：-1
 * 解释：
 * 我们无法只用 [0,1] 和 [1,2] 覆盖 [0,5] 的整个过程。
 * 
 * 
 * 示例 3：
 * 
 * 
 * 输入：clips =
 * [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]],
 * T = 9
 * 输出：3
 * 解释： 
 * 我们选取片段 [0,4], [4,7] 和 [6,9] 。
 * 
 * 
 * 示例 4：
 * 
 * 
 * 输入：clips = [[0,4],[2,8]], T = 5
 * 输出：2
 * 解释：
 * 注意，你可能录制超过比赛结束时间的视频。
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * 1 
 * 0 
 * 0 
 * 
 * 
 */
#include <vector>
#include <algorithm>
using namespace std;
// @lc code=start
class Solution
{
public:
    int videoStitching(vector<vector<int>> &clips, int T)
    {
        sort(clips.begin(), clips.end());
        int ans = 1;

        int end = 0;
        int next = 0;
        for (auto c : clips)
        {
            if (c[0] > end)
            {
                if (next >= T)
                    break;
                ans++;
                end = next;
                if (c[0] > end)
                    return -1;
            }
            next = max(next, c[1]);
        }
        return (next < T) ? -1 : ans;
    }
};
// @lc code=end
/* 
如果要覆盖所有区间，那么先从视频开始的 0 开始考虑
找到所有包含 0 的片段，因为不会有比 0 小开始的片段，所以很好找
假如有 [0,1] 和 [0,2] 两个片段，当然会选择 [0,2] 毕竟多了可以剪掉，少了就得多找一个片段了
当选择了 [0,2] 为一个肯定要选的片段之后，接下来可以找 [1,x] 和 [2,x] 的片段
同理，在所有的 [1,x] 和 [2,x] 片段中挑选覆盖更多的片段
重复这个做法，直到影片结束
因此，如果对 vector<vector<int>>& clips 排序，即可以将片段按照时间先后整理出来
使用 int end 表示目前收集的片段已经覆盖到最远的位置
使用 int next 表示在到达最远位置前，检查新的片段中可以到达的最远位置
当新的片段开始的时间已经超过 end ，就可以从这一批检查的片段中选一个覆盖最远的片段加入到已收集，将 end 更新为 next
 */